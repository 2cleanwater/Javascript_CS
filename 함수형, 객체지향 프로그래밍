- 함수형 프로그래밍
    - 입출력이 순수해야합니다. (순수함수)
    - 부작용(부산물)이 없어야합니다.
    - 함수와 데이터를 중점으로 생각합니다.
    - 대표적인 함수 프로그래밍 함수 **map**, **filter**와 **reduce**
    - 고차 함수
        - 함수를 인자로 받는 함수
        
        ```jsx
        // 함수를 인수로 받는 함수
        function func2(f) {
          f();
        }
        
        // 함수를 반환하는 함수
        function func1() {
          return function() {};
        }
        ```
        
    - 클로저
        - 안쪽 스코프에서 정의된 변수 바깥 스코프에서 접근X
        - **안쪽 스코프에서 만들어진 함수에서 바깥 스코프의 변수를 사용하고 있다면**, 이 함수를 통해서 변수를 계속 사용할 수 있다.
        
1. 함수형 프로그래밍(Functional Programming):
함수형 프로그래밍은 계산을 수학적 함수의 평가로 다루는 프로그래밍 패러다임입니다. 이 패러다임의 주요 특징은 다음과 같습니다:
    - 함수는 일급 객체(first-class citizen)로 취급됩니다. 이는 함수를 변수에 할당하고 함수를 다른 함수의 인자로 전달하거나 반환할 수 있음을 의미합니다.
    - 불변성(Immutability): 데이터는 변경 불가능하게 다루어집니다. 새로운 데이터를 생성하고 원래 데이터를 변경하지 않는 방식으로 작업합니다.
    - 순수 함수(Pure Functions): 부작용(side effect)이 없는 순수 함수를 사용합니다. 동일한 입력에 대해 항상 동일한 출력을 반환하는 함수를 의미합니다.
    - 고차 함수(Higher-Order Functions): 함수를 다루는 함수로, map, filter, reduce 등의 고차 함수를 사용하여 데이터를 처리하고 조작합니다.
    
    함수형 프로그래밍은 복잡성을 줄이고 예측 가능한 코드를 작성하는 데 도움을 줄 수 있습니다. 자바스크립트는 함수형 프로그래밍을 지원하기 위한 기능을 포함하고 있으며, 화살표 함수, 클로저, map, filter, reduce 등의 기능을 활용하여 함수형 프로그래밍을 구현할 수 있습니다.
    
2. 객체지향 프로그래밍(Object-Oriented Programming, OOP):
객체지향 프로그래밍은 프로그램을 객체의 집합으로 구조화하고, 이러한 객체들 간의 상호작용을 중심으로 설계하는 프로그래밍 패러다임입니다. 이 패러다임의 주요 특징은 다음과 같습니다:
    - 클래스와 객체: 객체는 클래스를 기반으로 생성됩니다. 클래스는 객체의 특성(속성)과 동작(메서드)을 정의하는 템플릿입니다.
    - 상속(Inheritance): 클래스는 다른 클래스로부터 상속을 받아 새로운 클래스를 정의할 수 있으며, 이를 통해 코드 재사용과 계층 구조를 만들 수 있습니다.
    - 다형성(Polymorphism): 다양한 객체가 동일한 인터페이스를 공유하고, 이를 통해 다른 객체들과 상호작용할 수 있습니다.
    - 캡슐화(Encapsulation): 객체의 내부 상태를 보호하고 외부에서 직접 접근하지 못하게 함으로써 데이터 은닉과 보안을 지원합니다.
    
    자바스크립트는 프로토타입 기반의 객체지향 프로그래밍을 지원합니다. 클래스와 상속은 ES6(ECMAScript 2015)부터 지원되며, 프로토타입 체이닝을 이용한 객체 간의 상속과 다형성도 구현할 수 있습니다.
    

자바스크립트에서는 함수형 프로그래밍과 객체지향 프로그래밍을 혼합하여 사용할 수 있으며, 어떤 패러다임을 선택할지는 프로젝트의 요구 사항과 개발자의 기호에 따라 다를 수 있습니다.
